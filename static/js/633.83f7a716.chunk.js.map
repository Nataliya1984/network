{"version":3,"file":"static/js/633.83f7a716.chunk.js","mappings":"iOAYMA,EAAW,SAACC,GACd,IAAMC,EAA0B,GAahC,OAXKD,EAAOE,SAEDF,EAAOE,SAASC,OAAS,IAChCF,EAAOC,SAAW,iCAFlBD,EAAOC,SAAW,WAKjBF,EAAOI,MAEA,4CAA4CC,KAAKL,EAAOI,SAChEH,EAAOG,MAAQ,yBAFfH,EAAOG,MAAQ,WAIZH,GAGEK,EAAY,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXP,MAAO,GACPF,SAAU,GACVU,YAAY,GAEhBb,SAAAA,EACAc,SAAU,SAACb,GAEPO,GAASO,EAAAA,EAAAA,IAAgBd,IACzBe,MAAMC,KAAKC,UAAUjB,IACrBS,EAAOS,eAIf,OACI,kBAAML,SAAUJ,EAAOU,aAAvB,WACI,4BACI,sCACA,0BAAOC,YAAa,SAKTX,EAAOY,cAAc,WAE/BZ,EAAOa,QAAQlB,OAASK,EAAOR,OAAOG,OACnC,gBAAKmB,MAAO,CAACC,MAAO,OAApB,SAA6Bf,EAAOR,OAAOG,QAAe,SAElE,4BACI,yCACA,0BAAOgB,YAAa,YAKTX,EAAOY,cAAc,cAE/BZ,EAAOa,QAAQpB,UAAYO,EAAOR,OAAOC,UACtC,gBAAKqB,MAAO,CAACC,MAAO,OAApB,SAA6Bf,EAAOR,OAAOC,WAAkB,SAErE,4BACI,0BACIuB,KAAM,YAKFhB,EAAOY,cAAc,gBAPjC,kBAWA,0BACI,mBAAQI,KAAK,SAAb,yBCpDhB,G,SAAeC,EAAAA,EAAAA,KANS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,UAI3B,EApBc,SAACE,GAEX,OAAIA,EAAMF,QACC,SAAC,KAAD,CAAUG,GAAI,cAIrB,4BACI,mCACA,SAACzB,EAAD","sources":["components/Login/LoginForm.tsx","components/Login/Login.tsx"],"sourcesContent":["import {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setIsLoggedInTC} from \"../redux/auth-reducer\";\r\n\r\n//пишем типизацию для ошибок\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nconst validate = (values: any) => {\r\n    const errors: FormikErrorType = {};\r\n\r\n    if (!values.password) {\r\n        errors.password = 'Required';\r\n    } else if (values.password.length < 3) {\r\n        errors.password = 'Must be 15 characters or less';\r\n    }\r\n\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    return errors;\r\n};\r\n\r\nexport const LoginForm = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: (values) => {\r\n            //debugger\r\n            dispatch(setIsLoggedInTC(values))\r\n            alert(JSON.stringify(values));\r\n            formik.resetForm()\r\n        }\r\n    })\r\n//debugger\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <label>Email</label>\r\n                <input placeholder={'email'}\r\n                    // name=\"email\"\r\n                    // onChange={formik.handleChange}\r\n                    // value={formik.values.email}\r\n                    // onBlur={formik.handleBlur}\r\n                       {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n            </div>\r\n            <div>\r\n                <label>Password</label>\r\n                <input placeholder={'Password'}\r\n                    // name=\"password\"\r\n                    // onChange={formik.handleChange}\r\n                    // value={formik.values.password}\r\n                    // onBlur={formik.handleBlur}\r\n                       {...formik.getFieldProps('password')}\r\n                />\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n            </div>\r\n            <div>\r\n                <input\r\n                    type={'checkbox'}\r\n                    // name=\"rememberMe\"\r\n                    // onChange={formik.handleChange}\r\n                    // checked={formik.values.rememberMe}\r\n                    // onBlur={formik.handleBlur}\r\n                    {...formik.getFieldProps('rememberMe')}\r\n                />\r\n                remember me\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import {Navigate} from \"react-router-dom\";\r\nimport {LoginForm} from \"./LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport React from \"react\";\r\n\r\n\r\ntype LoginType = MapStatePropsType\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst Login = (props: LoginType) => {\r\n\r\n    if (props.isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Login)"],"names":["validate","values","errors","password","length","email","test","LoginForm","dispatch","useDispatch","formik","useFormik","initialValues","rememberMe","onSubmit","setIsLoggedInTC","alert","JSON","stringify","resetForm","handleSubmit","placeholder","getFieldProps","touched","style","color","type","connect","state","isAuth","auth","props","to"],"sourceRoot":""}