{"version":3,"file":"static/js/916.7a177a3d.chunk.js","mappings":"0LACA,GAAgB,QAAU,yBAAyB,QAAU,0BCA7D,EAA0B,yB,SCgB1B,MARA,SAAiBA,GACb,OACI,gBAAKC,UAAWC,EAAhB,SACKF,EAAMG,WCXnB,EAAyB,2BAAzB,EAA6D,2BAA7D,EAAqG,+B,UCkBrG,MATA,SAAoBH,GAChB,OACI,gBAAKC,UAAS,UAAKC,EAAL,YAAuBA,GAArC,UACI,SAAC,KAAD,CAASE,GAAI,YAAcJ,EAAMK,GACxBJ,UAAW,gBAAEK,EAAF,EAAEA,SAAF,gBAAmBA,EAAWJ,EAAqB,KADvE,SAC8EF,EAAMO,U,oBCkChG,IAAMC,EAAW,SAACC,GAEd,IAAMC,EAAyB,GAY/B,OAVKD,EAAOE,cAGDF,EAAOE,cAAcC,OAAS,EAErCF,EAAOC,cAAgB,sNAChBF,EAAOE,cAAcC,OAAQ,KACpCF,EAAOC,cAAgB,uNALvBD,EAAOC,cAAgB,iHAQpBD,GAGLG,EAAiB,SAACb,GAGpB,IAAMc,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXL,cAAe,IAEnBH,SAAAA,EACAS,SAAU,SAAAR,GACNS,MAAMC,KAAKC,UAAUX,IACrBT,EAAMqB,UAAUZ,EAAOE,eACvBW,QAAQC,IAAIJ,KAAKC,UAAUX,OAIrC,OACI,kBAAMQ,SAAUH,EAAOU,aAAvB,WACI,4BACI,kBAAOC,QAAQ,WAAf,uHACA,mBACM,6BAAWC,MAAO,CAACC,QAAQ,QAYhBC,YAAa,sBACTd,EAAOe,cAAc,mBAGzCf,EAAOgB,QAAQnB,eAAiBG,EAAOJ,OAAOC,eAAgB,gBAAKe,MAAO,CAACK,MAAM,OAAnB,SAA4BjB,EAAOJ,OAAOC,gBAAuB,SAEpI,0BACI,mBAAQqB,KAAK,SAAb,4BAOd,EAtGA,SAAiBhC,GAGb,IAAIiC,EAAQjC,EAAMkC,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAW,SAAC,EAAD,CAAuB/B,KAAM+B,EAAE/B,KAAMF,GAAIiC,EAAEjC,IAA1BiC,EAAEjC,OAElEkC,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAW,SAAC,EAAD,CAAoBtC,QAASsC,EAAEtC,QAASE,GAAIoC,EAAEpC,IAAhCoC,EAAEpC,OAGrE,OAAqB,IAAjBL,EAAM0C,QACC,SAAC,KAAD,CAAUtC,GAAI,YAKrB,iBAAKH,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKiC,KAGL,iBAAKlC,UAAWC,EAAAA,SAAhB,UACOqC,GACH,SAAC1B,EAAD,CAAgBQ,UAAWrB,EAAMqB,mB,sEC3B7CsB,EAA6B,SAACV,GAAD,MAAgB,CAC7CS,OAAOT,EAAMW,KAAKF,SCuDtB,GAAeG,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAzCkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,YACnBQ,OAAOT,EAAMW,KAAKF,WAID,SAACK,GACtB,MAAO,CACH1B,UAAU,SAACV,GAEPoC,GAASC,EAAAA,EAAAA,GAAYrC,UDvBD,SAACsC,GAAmB,IAE5CC,EAF2C,0IAI7C,WAEI,OAA0B,IAAtBC,KAAKnD,MAAM0C,QACJ,SAAC,KAAD,CAAUtC,GAAI,YAElB,SAAC6C,GAAD,UAAeE,KAAKnD,YATc,GAEjBoD,EAAAA,WAgBhC,OAHuCN,EAAAA,EAAAA,IAAQH,EAARG,CAAoCI,KCqC7E,CAICG","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Massage/Message.module.css","components/Dialogs/Massage/Message.tsx","webpack://social-network/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/HOC/AuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Dialogs_content__NzjTC\",\"dialogs\":\"Dialogs_dialogs__ywoSQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__JEQbR\"};","import classes from \"./Message.module.css\";\r\nimport React from \"react\";\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n    id:number,\r\n}\r\n\r\nfunction Message(props: MessagePropsType) {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__49XjJ\",\"active\":\"DialogItem_active__jrBmH\",\"activeLink\":\"DialogItem_activeLink__kfN3M\"};","import classes from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\ntype DialogItemType = {\r\n    name:string,\r\n    id:number,\r\n}\r\n\r\nfunction DialogItem(props: DialogItemType) {\r\n    return (\r\n        <div className={`${classes.dialog} ${classes.active}`}>\r\n            <NavLink to={'/dialogs/' + props.id}\r\n                     className={({isActive}) => `${isActive ? classes.activeLink : ''}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport Message from \"./Massage/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {DialogPropsType} from \"./DialogsContainer\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\nfunction Dialogs(props: DialogPropsType) {\r\n\r\n    //let state = props.store.getState().dialogsPage\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map((d:any) => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n\r\n    let messagesElements = state.messages.map((m:any) => <Message key={m.id} message={m.message} id={m.id}/>);\r\n\r\n\r\n    if (props.isAuth === false){\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n   // alert(props.isAuth)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                  {messagesElements}\r\n                <AddMessageForm addMessag={props.addMessag} />\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type AddMessageForm={\r\n    addMessag:(newMessagText:string)=>void\r\n\r\n}\r\n\r\ntype FormikErrorType ={\r\n    newMessagText?:string\r\n}\r\n\r\nconst validate = (values:any) => {\r\n//debugger\r\n    const errors:FormikErrorType = {};\r\n\r\n    if (!values.newMessagText) {\r\n       // debugger\r\n        errors.newMessagText = 'Заполните поле ввода';\r\n    } else if (values.newMessagText.length < 5) {\r\n       // debugger\r\n        errors.newMessagText = 'сообщение должно быть не менее 5 символов';\r\n    } else if (values.newMessagText.length >30){\r\n        errors.newMessagText = 'сообщение не должно превышать 30 символов'\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nconst AddMessageForm = (props:AddMessageForm) => {\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newMessagText: '',\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            alert(JSON.stringify(values));\r\n            props.addMessag(values.newMessagText)\r\n            console.log(JSON.stringify(values))\r\n        },\r\n    });\r\n\r\n  return(\r\n      <form onSubmit={formik.handleSubmit}>\r\n          <div>\r\n              <label htmlFor=\"textarea\">Напишите сообщение:</label>\r\n              <br/>\r\n                    <textarea  style={{outline:'none'}}\r\n                              // ref={newDialogsElement}\r\n                              // value={props.state.newMessagText}\r\n                              // onChange={onChangeHandler}\r\n                             // onKeyPress={onKeyPressHandler}\r\n\r\n\r\n                              // name=\"newMessagText\"\r\n                              // onChange={formik.handleChange}\r\n                              // value={formik.values.newMessagText}\r\n                              //  onBlur={formik.handleBlur}\r\n                        // сокращаем с помощью getFieldProps\r\n                               placeholder={'Enter your message'}\r\n                               {...formik.getFieldProps('newMessagText')}\r\n                    />\r\n\r\n              {formik.touched.newMessagText && formik.errors.newMessagText ? <div style={{color:'red'}}>{formik.errors.newMessagText}</div> : null}\r\n          </div>\r\n          <div>\r\n              <button type=\"submit\">Add post</button>\r\n              {/*<button  onClick={addMessag}>Add post</button>*/}\r\n          </div>\r\n      </form>\r\n  )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state:any) => ({\r\n    isAuth:state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component:any) => {\r\n\r\n  class RedirectComponent extends React.Component<any, any>{\r\n\r\n      render() {\r\n         // debugger\r\n          if (this.props.isAuth === false){\r\n              return <Navigate to={'/login'} />\r\n          }\r\n          return <Component {...this.props} />\r\n      }\r\n  }\r\n\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n\r\n  return ConnectedAuthRedirectComponent\r\n}","import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {addMessagAC, InitialStateType} from \"../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../HOC/AuthRedirect\";\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage:InitialStateType\r\n    isAuth:boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessag:(newMessagText:string)=>void\r\n}\r\n\r\nexport type DialogPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:Dispatch):MapDispatchPropsType => {\r\n    return {\r\n        addMessag:(newMessagText:string)=>{\r\n           // dispatch(addMessagAC(store.getState().dialogsPage.newMessagText))\r\n            dispatch(addMessagAC(newMessagText))\r\n        },\r\n    }\r\n}\r\n\r\n// compose(\r\n//     connect(mapStateToProps, mapDispatchToProps),\r\n//     withAuthRedirect\r\n// )\r\n// (Dialogs)\r\n//\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n// //\r\n// //\r\n// //     (props:any) => {\r\n// //\r\n// //     if (props.isAuth===false){\r\n// //         return <Navigate to={'/login'}/>\r\n// //     }\r\n// //\r\n// //    // debugger\r\n// //\r\n// //     return(\r\n// //         <Dialogs {...props}/>\r\n// //     )\r\n// // }\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)\r\n(Dialogs)\r\n\r\n"],"names":["props","className","classes","message","to","id","isActive","name","validate","values","errors","newMessagText","length","AddMessageForm","formik","useFormik","initialValues","onSubmit","alert","JSON","stringify","addMessag","console","log","handleSubmit","htmlFor","style","outline","placeholder","getFieldProps","touched","color","type","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","mapStateToPropsForRedirect","auth","compose","connect","dispatch","addMessagAC","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}